# Multi-stage Dockerfile for monolith service
# Build stage
FROM golang:1.19-alpine AS builder

# Install build dependencies
RUN apk --no-cache add git ca-certificates tzdata

WORKDIR /src

# Copy common module
COPY common/ ./common/

# Copy monolith service
COPY monolith/ ./monolith/

# Build the monolith service
WORKDIR /src/monolith
RUN go mod download && \
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -trimpath \
    -ldflags="-s -w -X main.version=$(date -u +%Y%m%d-%H%M%S)" \
    -o /out/codejudge-monolith \
    .

# Production stage - Use distroless for security and minimal size
FROM gcr.io/distroless/static-debian11:nonroot

# Copy timezone data
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# Copy CA certificates
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy the binary
COPY --from=builder /out/codejudge-monolith /app/codejudge-monolith

# Copy static files
COPY --from=builder /src/monolith/static /app/static

# Set working directory
WORKDIR /app

# Environment variables with defaults
ENV PORT=8080
ENV GIN_MODE=release

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD ["/app/codejudge-monolith", "-health-check"] || exit 1

# Use non-root user for security
USER nonroot:nonroot

# Run the application
ENTRYPOINT ["/app/codejudge-monolith"]
