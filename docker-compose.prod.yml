version: '3.8'

# Production-ready docker-compose for Azure deployment
# This version includes health checks and proper resource limits

services:
  gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      problems:
        condition: service_healthy
      submissions:
        condition: service_healthy
      plagiarism:
        condition: service_healthy
    environment:
      - PROBLEMS_SERVICE_URL=http://problems:8000
      - SUBMISSIONS_SERVICE_URL=http://submissions:8001
      - PLAGIARISM_SERVICE_URL=http://plagiarism:8002
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    restart: unless-stopped

  problems:
    build:
      context: .
      dockerfile: problems-service-go/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgres://user:password@db:5432/codejudgedb?sslmode=disable
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    restart: unless-stopped

  submissions:
    build:
      context: .
      dockerfile: submissions-service-go/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - submissions_volume:/app/submissions
    environment:
      - DATABASE_URL=postgres://user:password@db:5432/codejudgedb?sslmode=disable
      - REDIS_URL=redis:6379
      - SUBMISSION_STORAGE_PATH=/app/submissions
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    restart: unless-stopped

  plagiarism:
    build:
      context: .
      dockerfile: plagiarism-service-go/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgres://user:password@db:5432/codejudgedb?sslmode=disable
      - REDIS_URL=redis:6379
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    restart: unless-stopped

  judge:
    build: ./judge-service
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - submissions_volume:/app/submissions
    environment:
      - REDIS_URL=redis:6379
      - DATABASE_URL=postgres://user:password@db:5432/codejudgedb?sslmode=disable
      - SUBMISSION_WORKDIR=/app/submissions
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    restart: unless-stopped
    cap_drop:
      - ALL
    cap_add:
      - SYS_PTRACE  # Required for process sandboxing
    security_opt:
      - no-new-privileges:true

  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: codejudgedb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d codejudgedb"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 128mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  submissions_volume:
    driver: local